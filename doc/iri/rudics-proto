Fri, Jun 14, 2019  3:19:23 PM
.1 char stream from land is slightly > 1ms/char
.2 less than 3sec for cmds/done, 1 second later comes cmd
.3  ... 2.1sec ... (cmds\n) ... 1sec ... (@@@msg)
3B @@@, 2B checksum, 2B msg length, 1B type 'C', 1B bnum, 1B bcnt, 'send1'

.. testing exact response in landCmds
 <21'cmds\n @@@k xA9  x00  x0B C x01  x01 send11'<
 time=1.320 [0] x63 'c'
 time=1.322 [1] x6D 'm'
 time=1.323 [2] x64 'd'
 time=1.324 [3] x73 's'
 time=1.325 [4] x0A '\n '
 time=2.310 [5] x40 '@'
 time=2.312 [6] x40 '@'
 time=2.313 [7] x40 '@'
 time=2.314 [8] x6B 'k'
 time=2.315 [9] xA9 ' xA9 '
 time=2.316 [10] x00 ' x00 '
 time=2.317 [11] x0B ' x0B '
 time=2.318 [12] x43 'C'
 time=2.319 [13] x01 ' x01 '
 time=2.320 [14] x01 ' x01 '
 time=2.321 [15] x73 's'
 time=2.322 [16] x65 'e'
 time=2.323 [17] x6E 'n'
 time=2.324 [18] x64 'd'
 time=2.325 [19] x31 '1'
 time=2.326 [20] x31 '1'

DESCRIPTIONS OF PMEL IRIDIUM PROTOCOL		10/01/2009

1.BUOY TO SHORE CONNECTION

1.1.  There will be two layers of information headers used in a call.  The first layer will be the platform id layer, the second layer will be the data id.

1.2.  The platform id layer will consist of the following 13 byte header:

	3 bytes of leader which will be ???; ( 3 bytes 0f 0x3f);  
	2 bytes of crc checksum for the id header;   
	4 bytes of project id. These will be ascii.
	4 bytes of platform id. These will be ascii. 
The leader bytes are ignored in the calculation of the checksum.  The checksum is calculated on the following 8 bytes of id.

1.3.  The data id layer will consist of the following 10 byte header:

	3 bytes of leader which will be @@@; (three bytes of 0x40); 
        2 bytes of crc checksum;
        2 bytes of message length;
        1 byte of message type;  
            (‘T’ or ‘I’ =Text,‘B’= Binary, ‘Z’ = Zip binary , ‘z’= zip text

	1 byte block number;
	1 byte number of block.
This header is attached onto the front of a block of data.  
The crc checksum will include all bytes, header and data, following it.  It will not include itself, or the @@@ bytes.
The message length value indicates the number of bytes included in the crc checksum.  This value is the number of bytes in a block + 5.
The receiving end must receive this many bytes plus the two crc bytes, plus at least one of the leader @ bytes to have a complete block.  
Message Type= ‘T’(0x54) or‘I’(0x49)=Text, ‘B’(0x42)=Binary, ‘Z’(0x5A)= Zip binary , ‘z’(0x7A)= zip text
 
There will be a maximum of 64 blocks numbered from 1 to 64  and a maximum of  65536 bytes per block, for a maximum data file size of 4.2 megabytes.  Actual block size might change from application to application.

1.4.  The resend request will consist of 14 bytes:
	3 bytes of leader which will be @@@ (three bytes of 0x40);
	2 bytes of crc check.  This will include all succeeding bytes in this request string;
	1 byte of message type “R” (0x52), indicating it is a retry message;
        8 bytes of bit-mapped block resend flags, one bit for each of 64 possible blocks.  The ms bit of the first byte sent will be set if block 64 is to be resent, the ls bit of the last byte will be set if block 1 is to be resent. 

1.5.  When the buoy initiates a call, the system will go through the following steps:
  1.  Wake the iridium modem using the AT command.
  2.  Call the land system number.
  3.  If a connect message is received, the buoy will begin sending the platform id header every few seconds to shore, then wait for a “land ready” signal from land.  This signal will be a message of three bytes of ACK.
  4.  If this connection isn’t made within a certain timeout, then the call is abandoned.  If the connection is made, then the buoy sends its data.  This will consist of all blocks, however many.
  5.  Buoy waits for a response from land.  This will be the string “done”, if the data is received correctly, or a retry command of the form shown above or “cmds”
  6.  If land sends done, then end the call.  
  7.  If land sends retry signal, then resend requested blocks.
  8. If land sends cmds, then the system will enter into the shore to buoy connection      scheme starting at 5.4. (Repeat until “done” is received)

1.6.  The difference between resend and recall.  As long as the comm connection is open, any bad data can be obtained by the resend request as outlined above.  If the communications channel closes before the data transfer is complete, then the buoy can at its own discretion schedule a recall event for some time in the future.  This would entail a complete restarting of the calling process.

:2.SHORE TO BUOY CONNECTION

5.  When the land initiates a call, the system will go through the following steps:

  1.  Call the buoy number.
  2.  The land side waits for the buoy to send a platform id.
  3.  On the buoy, when a ring message is received, the buoy will begin sending the platform id header every few seconds to the land, then wait for a “ready” signal.  This signal will be a message of three bytes of the string “ACK”.  This will establish the comm. circuit.
  4.  If this connection isn’t made within a certain timeout, then the call is abandoned.  If the connection is made, then the land sends its command data and the buoy receives it.   This will consist of blocks of data with data headers as described in section 1.3 above.
  5.  Land waits for a response from buoy.  This will be the string “done”, if the command is received correctly, the string “data” if the command is received correctly and is to send back data, a resend command of the form shown above in section 1.4 if the checksum doesn’t work or “cmds” for another command
  6.  If buoy sends “done”, land side hangs up.  If the buoy sends “data” the land side receives the data.  If the buoy sends resend message, the land side retries appropriately.  If the buoy sends “cmds”, land side will send another command. Repeat until “done”
  7.  If buoy sends data, the land side must receive it.   This data will have a data id header the same as that described in section 1.3. above.
  8.  The land side will initiate retries, or will recall the buoy if necessary. The calling side controls the use of retries and recalls.  This does not preclude the buoy from having its own limits on the number of times it will retry or accept recalls.
