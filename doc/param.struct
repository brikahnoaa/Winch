ADS.h:
ADS
typedef struct {
  char BATCAP[9];
  short BATLOG;    // t logging change in battery capacity
  char MINVOLT[6]; //-v %.2f  minimum system voltage
} PowerParameters;

CTD.h:
CTD
typedef struct {
  short UPLOAD; // A boolean 1 or 0 to decide whether to upload CTD data at
                // surface.
  //    short POLLED;           //1 for polled sampling ("TS") or 0 for
  //autnomous
  // sampling defined by SAMPINT schedule
  //    short DELAY;            //Delay in seconds between polled samples
  //    short SAMPINT;          //Autonomous sampling interval.
} CTDParameters;

GPSIRID.h:
IRID
typedef struct {
  short ANTSW;    //=1: antenna switch; =0: no antenna switch
  short CALLHOUR; // Hour at which to call
  short CALLMODE; // 0==call on Dataxinterval, 1== call at set hour everyday.
  bool LOWFIRST;  // send file with lowest value first
  short MAXCALLS; // Maximum Iridium calls per session
  short MAXUPL;   // Max upload try per call
  short MINSIGQ;  // Min Irid signal quality to proceed
  short OFFSET;   // GPS and UTC time offset in sec
  char PHONE[14]; // Rudics phone number 13 char long
  short REST;     // Rest period for Iridium to call again
  short WARMUP; // IRID GPS Unit warm up in sec//Does this really need to be 
} IridiumParameters;

MPC_Global.h:
MPC
typedef struct {
  short DATAXINT; // VEE:DATAXINTERVAL_NAME
  short DETINT;   //-D      //Minutes   //WISPR DET INTERVAL
  long FILENUM; // current number for 00000000.dat
  char LAT[17];      // 45:67.8900 North
  char LOGFILE[13]; // File Name: activity.log
  char LONG[17];     // 123:45.67 West
  char PLTFRMID[6];  // rudicsland
  char PROGNAME[20]; // added HM
  char PROJID[6];    // rudicsland
  short STARTMAX; //-s
  short STARTPHASE;
  short STARTUPS;
} SystemParameters;

WISPR.h:
WISP
typedef struct {
  short DETMAX; // Maximum Number of Detections to return
  short DETNUM; // Number of detections per one call to initiate #REALTIME call to land.
  short DUTYCYCL; // Duty cycle of recorder during one detection interval
  short GAIN; //-g 0-3
  short MODE;   //-M 1-5 in WISPR Start Script
  short NUM;    // Depends on the number of WISPR Boards installed
  // short    ON;      //Power to the WISPR 1=on 0=off
} WISPRParameters;

Winch.h:
NIGK
typedef struct {
  short ANTLEN; // Length from CTD to antenna. More specifically: From CTD Depth Sensor to water surface when antenna is out of water.
  short DELAY; // Time in seconds post TUTxAcousticModem when the Winch actually accepts character. Strictly for timing & Calculation of cable length
  short FRATE;  // Velocity in Meters/minute of the fall (descent) rate
  short PROFILES; // Keep record of number of profiles
  short RECOVERY; // If 1, call in repeatedly @ specified interval. 'A' reset to 30minutes.
  short RRATE;  // Velocity in meters/minute of the rise (ascent) rate
  short TDEPTH; // CTD depth at optimal position for iridium/gps comms (Antenna at surface when winch cable angle <10')
} WINCHParameters;

typedef struct {
  short ASCENTCALLS;
  short ASCENTRCV;
  short DESCENTCALLS;
  short DESCENTRCV;
  short STOPCALLS;
  short STOPRCV;
  short BUOYRCV;
  short WINCHCALLS;
} WinchCalls;
