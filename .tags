!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A3LAPWR	ant/antmain.c	71;"	d	file:
A3LARX	ant/antmain.c	72;"	d	file:
A3LATX	ant/antmain.c	73;"	d	file:
ADAvgFileName	boy/ads.c	/^static char ADAvgFileName[] = "c:00000000.pwr";$/;"	v	file:
ADCPWR	ant/antmain.c	68;"	d	file:
ADCounter	boy/ads.c	/^int ADCounter = 0;$/;"	v
ADS	boy/global.c	/^PowerParameters ADS;$/;"	v
ADSFileHandle	boy/ads.c	/^int ADSFileHandle;$/;"	v
ADSFileName	boy/ads.c	/^void ADSFileName(long counter) {$/;"	f
ADSOn	boy/ads.c	/^bool ADSOn;$/;"	v
ADSTIME	boy/ads.c	/^ushort ADSTIME = 0;$/;"	v
ADS_Status	boy/ads.c	/^bool ADS_Status() { return ADSOn; }$/;"	f
ADSample	boy/ads.c	/^short *ADSample;$/;"	v
ADSamplingRuptHandler	boy/ads.c	/^IEV_C_PROTO(ADSamplingRuptHandler);$/;"	v
ADTimingRuptHandler	boy/ads.c	/^IEV_C_PROTO(ADTimingRuptHandler);$/;"	v
AD_Check	boy/ads.c	/^bool AD_Check() {$/;"	f
AD_Log	boy/ads.c	/^void AD_Log(void) {$/;"	f
AD_Write	boy/ads.c	/^void AD_Write(ushort *AveragedEnergy) {$/;"	f
AMODEMBAUD	boy/winch.h	18;"	d
AMODEMBLOCKSIZE_DEFAULT	boy/settings.h	203;"	d
AMODEMBLOCKSIZE_DESC	boy/settings.h	204;"	d
AMODEMBLOCKSIZE_NAME	boy/settings.h	202;"	d
AMODEMMAXUPLOAD_DEFAULT	boy/settings.h	198;"	d
AMODEMMAXUPLOAD_DESC	boy/settings.h	199;"	d
AMODEMMAXUPLOAD_NAME	boy/settings.h	197;"	d
AMODEMOFFSET_DEFAULT	boy/settings.h	193;"	d
AMODEMOFFSET_DESC	boy/settings.h	194;"	d
AMODEMOFFSET_NAME	boy/settings.h	192;"	d
AMODEMPWR	boy/mpc_global.h	1;"	d
AMODEMRX	boy/mpc_global.h	11;"	d
AMODEMTX	boy/mpc_global.h	12;"	d
AModem_Data	boy/winch.c	/^void AModem_Data(void) {$/;"	f
ANTLEN	boy/winch.h	/^  short ANTLEN; \/\/ Length from CTD to antenna. More specifically: From CTD Depth$/;"	m	struct:__anon7
ANTMODPWR	boy/mpc_global.h	2;"	d
ANTSW	ant/GPSIRID.h	/^  short ANTSW;    \/\/=1: antenna switch; =0: no antenna switch$/;"	m	struct:__anon1
ANTSW	ant/antmain.c	69;"	d	file:
ANTSWPIN	ant/GPSIRID.c	23;"	d	file:
ANTSW_DEFAULT	boy/settings.h	111;"	d
ANTSW_DESC	boy/settings.h	112;"	d
ANTSW_NAME	boy/settings.h	110;"	d
ASCENTCALLS	boy/winch.h	/^  short ASCENTCALLS;$/;"	m	struct:__anon8
ASCENTRCV	boy/winch.h	/^  short ASCENTRCV;$/;"	m	struct:__anon8
ASCENTTIME	boy/global.h	/^  short ASCENTTIME;$/;"	m	struct:__anon4
AntMode	ant/AntMod.c	/^int AntMode(char r) {$/;"	f
AntModport	boy/global.h	/^  TUPort AntModport; \/\/ port for antenna module$/;"	m	struct:__anon4
AppendDetections	boy/wispr.c	/^void AppendDetections(char *DTXString, int FileDescriptor) {$/;"	f
Append_Files	boy/mpc.c	/^bool Append_Files(int Dest, const char *SourceFileName, bool erase,$/;"	f
BATCAP	boy/global.h	/^  char BATCAP[9];$/;"	m	struct:__anon5
BATLOG	boy/global.h	/^  short BATLOG;    \/\/ t logging change in battery capacity$/;"	m	struct:__anon5
BATTERYCAPACITY_DEFAULT	boy/settings.h	81;"	d
BATTERYCAPACITY_DESC	boy/settings.h	82;"	d
BATTERYCAPACITY_NAME	boy/settings.h	79;"	d
BATTERYLOG	boy/define.h	101;"	d
BATTERYLOGGER_DEFAULT	boy/settings.h	75;"	d
BATTERYLOGGER_DESC	boy/settings.h	76;"	d
BATTERYLOGGER_NAME	boy/settings.h	74;"	d
BAUD	boy/wispr.h	42;"	d
BITSHIFT	boy/define.h	110;"	d
BLUETOOTH_DEFAULT	boy/settings.h	188;"	d
BLUETOOTH_DESC	boy/settings.h	189;"	d
BLUETOOTH_NAME	boy/settings.h	187;"	d
BUFSIZE	ant/antmain.c	84;"	d	file:
BUFSZ	boy/define.h	129;"	d
BUOY	ant/antmain.c	86;"	d	file:
BUOYBAUD	boy/mpc_global.h	15;"	d
BUOYMODE	boy/global.h	/^  short BUOYMODE;  \/\/ 0=stopped 1=ascend 2=descend 3=careful ascent$/;"	m	struct:__anon4
BUOYRCV	boy/winch.h	/^  short BUOYRCV;$/;"	m	struct:__anon8
BUOY_BAUD	ant/antmain.c	81;"	d	file:
BitShift	boy/ads.c	/^ushort BitShift;$/;"	v
BlkLength	ant/GPSIRID.c	/^int BlkLength = RUDICSBLOCK; $/;"	v
Buoy_Status	boy/winch.c	/^void Buoy_Status(void) {$/;"	f
CALLHOUR	ant/GPSIRID.h	/^  short CALLHOUR; \/\/ Hour at which to call$/;"	m	struct:__anon1
CALLHOUR_DEFAULT	boy/settings.h	128;"	d
CALLHOUR_DESC	boy/settings.h	129;"	d
CALLHOUR_NAME	boy/settings.h	127;"	d
CALLMODE	ant/GPSIRID.h	/^  short CALLMODE; \/\/ 0==call on Dataxinterval, 1== call at set hour everyday.$/;"	m	struct:__anon1
CALLMODE_DEFAULT	boy/settings.h	132;"	d
CALLMODE_DESC	boy/settings.h	133;"	d
CALLMODE_NAME	boy/settings.h	131;"	d
CHARDELAY	boy/utils.c	6;"	d	file:
CLK	boy/define.h	91;"	d
CLK	boy/define.h	93;"	d
COM4PWR	ant/antmain.c	75;"	d	file:
COM4RX	ant/antmain.c	76;"	d	file:
COM4TX	ant/antmain.c	77;"	d	file:
CONSOLEINPUT	boy/define.h	22;"	d
CTDParameters	boy/ctd.c	/^struct CTDParameters{$/;"	s	file:
CTDSENSOR	boy/define.h	21;"	d
CTDSleep	boy/lara.c	/^void CTDSleep(void) {$/;"	f
CTDUPLOADFILE_DEFAULT	boy/settings.h	243;"	d
CTDUPLOADFILE_DESC	boy/settings.h	244;"	d
CTDUPLOADFILE_NAME	boy/settings.h	242;"	d
CTD_Data	boy/ctd.c	/^bool CTD_Data() {$/;"	f
CTD_DateTime	boy/ctd.c	/^void CTD_DateTime() {$/;"	f
CTD_GetPrompt	boy/ctd.c	/^bool CTD_GetPrompt() {$/;"	f
CTD_Init	boy/ctd.c	/^bool CTD_Init() {$/;"	f
CTD_Sample	boy/ctd.c	/^void CTD_Sample() {$/;"	f
CTD_SampleBreak	boy/ctd.c	/^void CTD_SampleBreak() {$/;"	f
CTD_SyncMode	boy/ctd.c	/^void CTD_SyncMode() {$/;"	f
CTDport	boy/global.h	/^  TUPort CTDport; \/\/ port for the buoy ctd$/;"	m	struct:__anon4
CTDsync	boy/global.h	/^  bool CTDsync; \/\/ ctd sync mode$/;"	m	struct:__anon4
CURRENT	boy/ads.c	/^long CURRENT; \/\/ Summation of channel 0 from QSPI...$/;"	v
CUSTOM_SYPCR	boy/lara.c	65;"	d	file:
Calc_Crc	ant/GPSIRID.c	/^int Calc_Crc(uchar *buf, int cnt) {$/;"	f
CallStatus	ant/GPSIRID.c	/^short CallStatus() {$/;"	f
Call_Land	ant/GPSIRID.c	/^bool Call_Land(void) {$/;"	f
ChangeWISPR	boy/wispr.c	/^void ChangeWISPR(short wnum) {$/;"	f
CheckSignal	ant/GPSIRID.c	/^bool CheckSignal() {$/;"	f
CheckTime	boy/lara.c	/^bool CheckTime(ulong prevTime, short mode, short hour) {$/;"	f
Check_If_Cmds_Done_Or_Resent	ant/GPSIRID.c	/^short Check_If_Cmds_Done_Or_Resent(ulong *val0, ulong *val1) {$/;"	f
Check_Timers	boy/mpc.c	/^float Check_Timers(ushort PLI) {$/;"	f
Check_Vitals	boy/mpc.c	/^short Check_Vitals() {$/;"	f
CompareCoordinates	ant/GPSIRID.c	/^bool CompareCoordinates(char *LAT, char *LONG) {$/;"	f
Connect_SendFile_RecCmd	ant/GPSIRID.c	/^short Connect_SendFile_RecCmd(const char *filename) {$/;"	f
Console	boy/lara.c	/^void Console(char in) {$/;"	f
ConsoleIrid	ant/GPSIRID.c	/^void ConsoleIrid() {$/;"	f
Convert_BitMap_To_CharBuf	ant/GPSIRID.c	/^void Convert_BitMap_To_CharBuf(ulong val0, ulong val1, char *bin_str) {$/;"	f
CurrentWarning	boy/lara.c	/^bool CurrentWarning() {$/;"	f
CustomSYPCR	boy/lara.c	/^short CustomSYPCR = WDT105s | HaltMonEnable | BusMonEnable | BMT32;$/;"	v
DATA	boy/global.h	/^  bool DATA;     \/\/ ?? Data is triggered true when the timing interval goes off.$/;"	m	struct:__anon4
DATAXINT	boy/global.h	/^  short DATAXINT; \/\/ VEE:DATAXINTERVAL_NAME$/;"	m	struct:__anon3
DATAXINTERVAL_DEFAULT	boy/settings.h	68;"	d
DATAXINTERVAL_DESC	boy/settings.h	69;"	d
DATAXINTERVAL_NAME	boy/settings.h	67;"	d
DBG	ant/antmain.c	42;"	d	file:
DBG	ant/antmain.c	44;"	d	file:
DBG	boy/define.h	58;"	d
DBG	boy/define.h	60;"	d
DBG0	boy/define.h	64;"	d
DBG0	boy/define.h	66;"	d
DBG1	ant/antmain.c	48;"	d	file:
DBG1	ant/antmain.c	52;"	d	file:
DBG1	boy/define.h	70;"	d
DBG1	boy/define.h	72;"	d
DBG2	boy/define.h	76;"	d
DBG2	boy/define.h	78;"	d
DEBUG	ant/antmain.c	40;"	d	file:
DEBUG	boy/define.h	7;"	d
DEBUG0	boy/define.h	9;"	d
DEBUG1	boy/define.h	11;"	d
DEBUG2	boy/define.h	13;"	d
DEBUGWISPR	boy/define.h	15;"	d
DELAY	boy/winch.h	/^  short DELAY; \/\/ Time in seconds post TUTxAcousticModem when the Winch actually$/;"	m	struct:__anon7
DEPTH	boy/global.h	/^  float DEPTH;     \/\/ Most recent depth measurement from CTD$/;"	m	struct:__anon4
DESCENTCALLS	boy/winch.h	/^  short DESCENTCALLS;$/;"	m	struct:__anon8
DESCENTRCV	boy/winch.h	/^  short DESCENTRCV;$/;"	m	struct:__anon8
DESCENTTIME	boy/global.h	/^  short DESCENTTIME;$/;"	m	struct:__anon4
DETECTIONINT_DEFAULT	boy/settings.h	54;"	d
DETECTIONINT_DESC	boy/settings.h	55;"	d
DETECTIONINT_NAME	boy/settings.h	53;"	d
DETECTIONMAX_DEFAULT	boy/settings.h	146;"	d
DETECTIONMAX_DESC	boy/settings.h	147;"	d
DETECTIONMAX_NAME	boy/settings.h	145;"	d
DETECTIONNUM_DEFAULT	boy/settings.h	141;"	d
DETECTIONNUM_DESC	boy/settings.h	142;"	d
DETECTIONNUM_NAME	boy/settings.h	140;"	d
DETINT	boy/global.h	/^  short DETINT;   \/\/-D      \/\/Minutes   \/\/WISPR DET INTERVAL$/;"	m	struct:__anon3
DETMAX	boy/wispr.h	/^  short DETMAX; \/\/ Maximum Number of Detections to return$/;"	m	struct:__anon9
DETNUM	boy/wispr.h	/^  short DETNUM; \/\/ Number of detections per one call to initiate #REALTIME call$/;"	m	struct:__anon9
DEVICECOM	boy/mpc_global.h	3;"	d
DEVICERX	boy/mpc_global.h	10;"	d
DEVICETX	boy/mpc_global.h	9;"	d
DIFARPWR	boy/mpc_global.h	6;"	d
DIVENUM_DEFAULT	boy/settings.h	173;"	d
DIVENUM_DESC	boy/settings.h	174;"	d
DIVENUM_NAME	boy/settings.h	172;"	d
DOS_Com	boy/mpc.c	/^void DOS_Com(char *command, long filenum, char *ext, char *extt) {$/;"	f
DUTYCYCL	boy/wispr.h	/^  short DUTYCYCL; \/\/ Duty cycle of recorder during one detection interval$/;"	m	struct:__anon9
DUTYCYCLE_DEFAULT	boy/settings.h	162;"	d
DUTYCYCLE_DESC	boy/settings.h	163;"	d
DUTYCYCLE_NAME	boy/settings.h	161;"	d
DataInterval	boy/mpc.c	/^int DataInterval;$/;"	v
DelayTX	boy/utils.c	/^void DelayTX(int ch) { RTCDelayMicroSeconds((long) ch * 3333L); }$/;"	f
Delay_AD_Log	boy/mpc.c	/^void Delay_AD_Log(short Sec) {$/;"	f
Delayms	boy/define.h	126;"	d
DetectionInt	boy/mpc.c	/^int DetectionInt;$/;"	v
DevSelect	ant/AntMod.c	/^void DevSelect(int dev) {$/;"	f
DutyCycleTicks	boy/mpc.c	/^int DutyCycleTicks;$/;"	v
ExtFinishPulseRuptHandler	boy/lara.c	/^IEV_C_PROTO(ExtFinishPulseRuptHandler);$/;"	v
FCHAN	boy/ads.h	5;"	d
FILENUM	boy/global.h	/^  long FILENUM; \/\/ current number for 00000000.dat$/;"	m	struct:__anon3
FILENUM_DEFAULT	boy/settings.h	60;"	d
FILENUM_DESC	boy/settings.h	61;"	d
FILENUM_NAME	boy/settings.h	59;"	d
FRATE	boy/winch.h	/^  short FRATE;  \/\/ Velocity in Meters\/minute of the fall (descent) rate$/;"	m	struct:__anon7
Free_Disk_Space	boy/mpc.c	/^long Free_Disk_Space() {$/;"	f
GAIN	boy/wispr.h	/^  short GAIN; \/\/-g 0-3$/;"	m	struct:__anon9
GPSIRID_Init	ant/GPSIRID.c	/^int GPSIRID_Init() {$/;"	f
GPS_TRIES	ant/GPSIRID.c	27;"	d	file:
GPSstartup	ant/GPSIRID.c	/^bool GPSstartup() {$/;"	f
GatherWISPRFreeSpace	boy/wispr.c	/^void GatherWISPRFreeSpace() {$/;"	f
GetFileName	boy/mpc.c	/^char *GetFileName(bool Lowest, bool incIndex, long *fcounter,$/;"	f
GetGPSInput	ant/GPSIRID.c	/^char *GetGPSInput(char *chars, int *numsats) {$/;"	f
GetGPS_SyncRTC	ant/GPSIRID.c	/^bool GetGPS_SyncRTC() {$/;"	f
GetIRIDIUMSettings	ant/GPSIRID.c	/^void GetIRIDIUMSettings() {$/;"	f
GetIRIDInput	ant/GPSIRID.c	/^short GetIRIDInput(char *Template, short num_char_to_reads, uchar *compstring,$/;"	f
GetPowerSettings	boy/ads.c	/^void GetPowerSettings() {$/;"	f
GetSettings	boy/mpc.c	/^void GetSettings(void) {$/;"	f
GetUTCSeconds	ant/GPSIRID.c	/^bool GetUTCSeconds() {$/;"	f
GetWISPRFreeSpace	boy/wispr.c	/^float GetWISPRFreeSpace() {$/;"	f
GetWISPRInput	boy/wispr.c	/^char *GetWISPRInput(float *numchars) {$/;"	f
GetWISPRSettings	boy/wispr.c	/^void GetWISPRSettings() {$/;"	f
GetWinchSettings	boy/winch.c	/^void GetWinchSettings() {$/;"	f
Get_ADCounter	boy/ads.c	/^int Get_ADCounter() { return ADCounter; }$/;"	f
Get_Voltage	boy/ads.c	/^float Get_Voltage() { return Voltage; } \/\/____ Get_Voltage ____\/\/$/;"	f
HANDSHAKE	ant/GPSIRID.c	22;"	d	file:
HangUp	ant/GPSIRID.c	/^bool HangUp(void) {$/;"	f
IEV_C_FUNCT	boy/ads.c	/^IEV_C_FUNCT($/;"	f
IEV_C_FUNCT	boy/ads.c	/^IEV_C_FUNCT(ADTimingRuptHandler) \/\/ implied (IEVStack *ievstack:__a0) parameter$/;"	f
IEV_C_FUNCT	boy/lara.c	/^IEV_C_FUNCT(ExtFinishPulseRuptHandler) {$/;"	f
INITIAL_BATTERY_CAPACITY	boy/define.h	106;"	d
IRID	ant/GPSIRID.c	/^IridiumParameters IRID;$/;"	v
IRID	ant/antmain.c	88;"	d	file:
IRIDBAUD	boy/mpc_global.h	16;"	d
IRIDFileHandle	ant/GPSIRID.c	/^static int IRIDFileHandle;$/;"	v	file:
IRIDFilename	ant/GPSIRID.c	/^static char IRIDFilename[sizeof "c:00000000.dat"];$/;"	v	file:
IRIDGPS	ant/GPSIRID.c	/^short IRIDGPS() {$/;"	f
IRIDIUM	boy/define.h	20;"	d
IRIDPHONE_DEFAULT	boy/settings.h	93;"	d
IRIDPHONE_DESC	boy/settings.h	94;"	d
IRIDPHONE_NAME	boy/settings.h	92;"	d
IRIDREST_DEFAULT	boy/settings.h	115;"	d
IRIDREST_DESC	boy/settings.h	116;"	d
IRIDREST_NAME	boy/settings.h	114;"	d
IRIDStatus	ant/GPSIRID.c	/^static short IRIDStatus;$/;"	v	file:
IRIDWarm	ant/GPSIRID.c	/^short IRIDWarm = 27;  \/\/ Irid Modem warm-up. 45 IS NORMAL, 1 FOR TESTING \/\/\/$/;"	v
IRID_BAUD	ant/antmain.c	83;"	d	file:
IRQ2_ISR	boy/lara.c	/^static void IRQ2_ISR(void) {$/;"	f	file:
IRQ3_ISR	boy/lara.c	/^static void IRQ3_ISR(void) {$/;"	f	file:
IRQ4_ISR	boy/lara.c	/^static void IRQ4_ISR(void) {$/;"	f	file:
IRQ5_ISR	boy/lara.c	/^static void IRQ5_ISR(void) {$/;"	f	file:
Incoming_Data	boy/lara.c	/^int Incoming_Data() {$/;"	f
InitializeLARA	boy/lara.c	/^void InitializeLARA(ulong *PwrOn) {$/;"	f
IridiumParameters	ant/GPSIRID.h	/^} IridiumParameters;$/;"	t	typeref:struct:__anon1
LARA	boy/global.c	/^SystemStatus LARA;$/;"	v
LARA_Recovery	boy/lara.c	/^void LARA_Recovery() {} \/\/____ LARA_Recovery() ____\/\/$/;"	f
LAT	boy/global.h	/^  char LAT[17];      \/\/ 45:67.8900 North$/;"	m	struct:__anon3
LATITUDE_DEFAULT	boy/settings.h	35;"	d
LATITUDE_DESC	boy/settings.h	36;"	d
LATITUDE_NAME	boy/settings.h	34;"	d
LOGFILE	boy/global.h	/^  char LOGFILE[13]; \/\/ File Name: activity.log$/;"	m	struct:__anon3
LOGFILE_DEFAULT	boy/settings.h	64;"	d
LOGFILE_DESC	boy/settings.h	65;"	d
LOGFILE_NAME	boy/settings.h	63;"	d
LONG	boy/global.h	/^  char LONG[17];     \/\/ 123:45.67 West$/;"	m	struct:__anon3
LONGITUDE_DEFAULT	boy/settings.h	29;"	d
LONGITUDE_DESC	boy/settings.h	30;"	d
LONGITUDE_NAME	boy/settings.h	28;"	d
LOWFIRST	ant/GPSIRID.h	/^  bool LOWFIRST;  \/\/ send file with lowest value first$/;"	m	struct:__anon1
LOWFIRST_DEFAULT	boy/settings.h	136;"	d
LOWFIRST_DESC	boy/settings.h	137;"	d
LOWFIRST_NAME	boy/settings.h	135;"	d
LOWPOWER	boy/global.h	/^  bool LOWPOWER;$/;"	m	struct:__anon4
LogFile	ant/antmain.c	/^char *LogFile = {"activity.log"}; $/;"	v
LostConnect	ant/GPSIRID.c	/^bool LostConnect = false;$/;"	v
MAXCALLS	ant/GPSIRID.h	/^  short MAXCALLS; \/\/ Maximum Iridium calls per session$/;"	m	struct:__anon1
MAXCALLS_DEFAULT	boy/settings.h	124;"	d
MAXCALLS_DESC	boy/settings.h	125;"	d
MAXCALLS_NAME	boy/settings.h	123;"	d
MAXUPL	ant/GPSIRID.h	/^  short MAXUPL;   \/\/ Max upload try per call$/;"	m	struct:__anon1
MAXUPLOAD_DEFAULT	boy/settings.h	106;"	d
MAXUPLOAD_DESC	boy/settings.h	107;"	d
MAXUPLOAD_NAME	boy/settings.h	105;"	d
MAX_BLOCK_SIZE	boy/define.h	31;"	d
MAX_DATAX_INTERVAL	boy/define.h	33;"	d
MAX_DETECTIONS	boy/define.h	40;"	d
MAX_DETECTION_INTERVAL	boy/define.h	30;"	d
MAX_DUTYCYCLE	boy/define.h	42;"	d
MAX_GPS_CHANGE	boy/define.h	26;"	d
MAX_RESENT	ant/GPSIRID.c	26;"	d	file:
MAX_STARTUPS	boy/define.h	28;"	d
MAX_UPLOAD	boy/define.h	27;"	d
MINIMUM_BATTERY_CAPACITY	boy/define.h	107;"	d
MINSIGQ	ant/GPSIRID.h	/^  short MINSIGQ;  \/\/ Min Irid signal quality to proceed$/;"	m	struct:__anon1
MINSIGQ_DEFAULT	boy/settings.h	98;"	d
MINSIGQ_DESC	boy/settings.h	99;"	d
MINSIGQ_NAME	boy/settings.h	97;"	d
MINSYSVOLT_DEFAULT	boy/settings.h	87;"	d
MINSYSVOLT_DESC	boy/settings.h	88;"	d
MINSYSVOLT_NAME	boy/settings.h	86;"	d
MINVOLT	boy/global.h	/^  char MINVOLT[6]; \/\/-v %.2f  minimum system voltage$/;"	m	struct:__anon5
MIN_BATTERY_VOLTAGE	boy/define.h	104;"	d
MIN_DATAX_INTERVAL	boy/define.h	32;"	d
MIN_DETECTION_INTERVAL	boy/define.h	29;"	d
MIN_DUTYCYCLE	boy/define.h	41;"	d
MIN_FREESPACE	boy/define.h	43;"	d
MOORDEPTH	boy/global.h	/^  float MOORDEPTH; \/\/ Depth at beginning of LARA.PHASE==1. Averaged Samples$/;"	m	struct:__anon4
MPC	boy/global.c	/^SystemParameters MPC;$/;"	v
Make_Directory	boy/mpc.c	/^void Make_Directory(char *path) {$/;"	f
Max_No_SigQ_Chk	ant/GPSIRID.c	/^short Max_No_SigQ_Chk = 7;$/;"	v
MinSQ	ant/GPSIRID.c	/^short MinSQ;$/;"	v
NCHAN	boy/ads.h	6;"	d
NIGK	boy/winch.c	/^WINCHParameters NIGK;$/;"	v
NIGKANTENNALENGTH_DEFAULT	boy/settings.h	214;"	d
NIGKANTENNALENGTH_DESC	boy/settings.h	215;"	d
NIGKANTENNALENGTH_NAME	boy/settings.h	213;"	d
NIGKDELAY_DEFAULT	boy/settings.h	208;"	d
NIGKDELAY_DESC	boy/settings.h	209;"	d
NIGKDELAY_NAME	boy/settings.h	207;"	d
NIGKFALLRATE_DEFAULT	boy/settings.h	229;"	d
NIGKFALLRATE_DESC	boy/settings.h	230;"	d
NIGKFALLRATE_NAME	boy/settings.h	228;"	d
NIGKPROFILES_DEFAULT	boy/settings.h	234;"	d
NIGKPROFILES_DESC	boy/settings.h	235;"	d
NIGKPROFILES_NAME	boy/settings.h	233;"	d
NIGKPort	boy/winch.c	/^TUPort *NIGKPort;$/;"	v
NIGKRECOVERY_DEFAULT	boy/settings.h	238;"	d
NIGKRECOVERY_DESC	boy/settings.h	239;"	d
NIGKRECOVERY_NAME	boy/settings.h	237;"	d
NIGKRISERATE_DEFAULT	boy/settings.h	224;"	d
NIGKRISERATE_DESC	boy/settings.h	225;"	d
NIGKRISERATE_NAME	boy/settings.h	223;"	d
NIGKTARGETDEPTH_DEFAULT	boy/settings.h	219;"	d
NIGKTARGETDEPTH_DESC	boy/settings.h	220;"	d
NIGKTARGETDEPTH_NAME	boy/settings.h	218;"	d
NIGKWINCH	boy/define.h	24;"	d
NIGK_MIN_DEPTH	boy/winch.h	17;"	d
NUM	boy/wispr.h	/^  short NUM;    \/\/ Depends on the number of WISPR Boards installed$/;"	m	struct:__anon9
NUMCOM	ant/GPSIRID.c	25;"	d	file:
NextCharacter	boy/winch.c	/^char NextCharacter;$/;"	v
Nsamps	boy/ads.c	/^long Nsamps;  \/\/ Incremented upon each sample. Once Nsamps equals SAMPLES$/;"	v
Num_Resent	ant/GPSIRID.c	/^short Num_Resent;$/;"	v
OFFSET	ant/GPSIRID.h	/^  short OFFSET;   \/\/ GPS and UTC time offset in sec$/;"	m	struct:__anon1
OFFSET_DEFAULT	boy/settings.h	120;"	d
OFFSET_DESC	boy/settings.h	121;"	d
OFFSET_NAME	boy/settings.h	119;"	d
ON	boy/global.h	/^  bool ON;       \/\/ While "ON", continue running program$/;"	m	struct:__anon4
OpenBuoyPt	ant/antmain.c	/^TUPort* OpenBuoyPt(bool on) {$/;"	f
OpenIridPt	ant/antmain.c	/^TUPort* OpenIridPt(bool on) {$/;"	f
OpenSatCom	ant/GPSIRID.c	/^void OpenSatCom(bool onoff) {$/;"	f
OpenSbePt	ant/antmain.c	/^TUPort* OpenSbePt(bool on) {$/;"	f
OpenTUPort_NIGK	boy/winch.c	/^void OpenTUPort_NIGK(bool on) {$/;"	f
OpenTUPort_WISPR	boy/wispr.c	/^void OpenTUPort_WISPR(bool on) {$/;"	f
Open_Avg_File	boy/ads.c	/^void Open_Avg_File(long counter) {$/;"	f
PAMONEBIT	ant/antmain.c	64;"	d	file:
PAMPWR	ant/antmain.c	62;"	d	file:
PAMPort	boy/wispr.c	/^TUPort *PAMPort;$/;"	v
PAMRX	ant/antmain.c	65;"	d	file:
PAMTX	ant/antmain.c	66;"	d	file:
PAMZEROBIT	ant/antmain.c	63;"	d	file:
PAM_RX	boy/wispr.c	/^short PAM_RX, PAM_TX;$/;"	v
PAM_TX	boy/wispr.c	/^short PAM_RX, PAM_TX;$/;"	v
PHASE	boy/global.h	/^  short PHASE; \/\/ 1=WISPR, 2=Ascent, 3=Surface, 4=Descent, 5=deployment$/;"	m	struct:__anon4
PHONE	ant/GPSIRID.h	/^  char PHONE[14]; \/\/ Rudics phone number 13 char long$/;"	m	struct:__anon1
PITPERIOD	boy/ads.h	8;"	d
PITRATE	boy/ads.h	7;"	d
PLATFORM	boy/define.h	2;"	d
PLTFRMID	boy/global.h	/^  char PLTFRMID[6];  \/\/ rudicsland$/;"	m	struct:__anon3
PLTFRMID_DEFAULT	boy/settings.h	25;"	d
PLTFRMID_DESC	boy/settings.h	26;"	d
PLTFRMID_NAME	boy/settings.h	24;"	d
POWERERROR	boy/define.h	103;"	d
POWERLOGGING	boy/define.h	17;"	d
POWEROFFDEPTH_DEFAULT	boy/settings.h	182;"	d
POWEROFFDEPTH_DESC	boy/settings.h	183;"	d
POWEROFFDEPTH_NAME	boy/settings.h	181;"	d
POWERONDEPTH_DEFAULT	boy/settings.h	177;"	d
POWERONDEPTH_DESC	boy/settings.h	178;"	d
POWERONDEPTH_NAME	boy/settings.h	176;"	d
PROFILES	boy/winch.h	/^  short PROFILES; \/\/ Keep record of number of profiles$/;"	m	struct:__anon7
PROGNAME	boy/global.h	/^  char PROGNAME[20]; \/\/ added HM$/;"	m	struct:__anon3
PROG_DEFAULT	boy/settings.h	17;"	d
PROG_DESC	boy/settings.h	18;"	d
PROG_NAME	boy/settings.h	16;"	d
PROG_VERSION	boy/define.h	3;"	d
PROJID	boy/global.h	/^  char PROJID[6];    \/\/ rudicsland$/;"	m	struct:__anon3
PROJID_DEFAULT	boy/settings.h	21;"	d
PROJID_DESC	boy/settings.h	22;"	d
PROJID_NAME	boy/settings.h	20;"	d
PWR	boy/define.h	109;"	d
PWR	boy/define.h	123;"	d
ParseStartupParams	boy/mpc.c	/^void ParseStartupParams(bool DefaultSettings) {$/;"	f
PhaseFive	boy/lara.c	/^void PhaseFive() {$/;"	f
PhaseFour	boy/lara.c	/^void PhaseFour() {$/;"	f
PhaseOne	boy/lara.c	/^void PhaseOne() {$/;"	f
PhaseThree	boy/lara.c	/^void PhaseThree() {$/;"	f
PhaseTwo	boy/lara.c	/^void PhaseTwo() {$/;"	f
PhoneNum	ant/GPSIRID.c	/^static char PhoneNum[14];$/;"	v	file:
PhonePin	ant/GPSIRID.c	/^short PhonePin(void) {$/;"	f
PhoneStatus	ant/GPSIRID.c	/^int PhoneStatus() {$/;"	f
PltfrmID	ant/GPSIRID.c	/^static char PltfrmID[5];$/;"	v	file:
PowerParameters	boy/global.h	/^} PowerParameters;$/;"	t	typeref:struct:__anon5
Power_Monitor	boy/ads.c	/^float Power_Monitor(ulong totaltime, int filehandle, ulong *LoggingTime) {$/;"	f
PreRun	boy/mpc.c	/^void PreRun(void) {$/;"	f
PrintSystemStatus	boy/lara.c	/^char *PrintSystemStatus() {$/;"	f
ProjID	ant/GPSIRID.c	/^static char ProjID[5];$/;"	v	file:
PutInSleepMode	boy/lara.c	/^bool PutInSleepMode = false;$/;"	v
PwrOff	boy/lara.c	/^ulong PwrOff, PwrOn;$/;"	v
PwrOn	boy/lara.c	/^ulong PwrOff, PwrOn;$/;"	v
REALTIME	boy/define.h	23;"	d
RECOVERY	boy/winch.h	/^  short RECOVERY; \/\/ If 1, call in repeatedly @ specified interval. 'A' reset to$/;"	m	struct:__anon7
REST	ant/GPSIRID.h	/^  short REST;     \/\/ Rest period for Iridium to call again$/;"	m	struct:__anon1
RESTART	boy/global.h	/^  bool RESTART;$/;"	m	struct:__anon4
RRATE	boy/winch.h	/^  short RRATE;  \/\/ Velocity in meters\/minute of the rise (ascent) rate$/;"	m	struct:__anon7
RTS	boy/define.h	51;"	d
RTS	boy/define.h	53;"	d
RUDICSBLOCK	ant/GPSIRID.c	28;"	d	file:
ReadLine	boy/utils.c	/^int ReadLine(TUPort *port, char *in) {$/;"	f
RecallTimeout	ant/GPSIRID.c	24;"	d	file:
Receive_Command	ant/GPSIRID.c	/^int Receive_Command(int len) {$/;"	f
Reset_ADCounter	boy/ads.c	/^void Reset_ADCounter() { ADCounter = 0; }$/;"	f
Return_ADSTIME	boy/ads.c	/^ushort Return_ADSTIME() { return ADSTIME; }$/;"	f
RudicsConnect	ant/GPSIRID.c	/^bool RudicsConnect(int status) {$/;"	f
SAMPLES	boy/ads.c	/^ushort SAMPLES;$/;"	v
SBE	ant/antmain.c	87;"	d	file:
SBEPWR	ant/antmain.c	58;"	d	file:
SBERX	ant/antmain.c	59;"	d	file:
SBETX	ant/antmain.c	60;"	d	file:
STARTMAX	boy/global.h	/^  short STARTMAX; \/\/-s$/;"	m	struct:__anon3
STARTMAX_DEFAULT	boy/settings.h	50;"	d
STARTMAX_DESC	boy/settings.h	51;"	d
STARTMAX_NAME	boy/settings.h	48;"	d
STARTPHASE_DEFAULT	boy/settings.h	45;"	d
STARTPHASE_DESC	boy/settings.h	46;"	d
STARTPHASE_NAME	boy/settings.h	44;"	d
STARTUPS	boy/global.h	/^  short STARTUPS;$/;"	m	struct:__anon3
STARTUPS_DEFAULT	boy/settings.h	41;"	d
STARTUPS_DESC	boy/settings.h	42;"	d
STARTUPS_NAME	boy/settings.h	40;"	d
STATUS	boy/global.h	/^  short STATUS;$/;"	m	struct:__anon4
STOPCALLS	boy/winch.h	/^  short STOPCALLS;$/;"	m	struct:__anon8
STOPRCV	boy/winch.h	/^  short STOPRCV;$/;"	m	struct:__anon8
SURFACED	boy/global.h	/^  bool SURFACED; \/\/ Set to true when Antenna is estimated to be above water$/;"	m	struct:__anon4
SYSCLK	ant/antmain.c	79;"	d	file:
SYSCLK	boy/mpc_global.h	19;"	d
SYSTEMDIAGNOSTICS	boy/define.h	18;"	d
SatComOpen	ant/GPSIRID.c	/^bool SatComOpen = false;$/;"	v
SaveParams	boy/mpc.c	/^bool SaveParams(const char *Command) {$/;"	f
SendProjHdr	ant/GPSIRID.c	/^bool SendProjHdr() {$/;"	f
SendString	ant/GPSIRID.c	/^void SendString(const char *StringIn) {$/;"	f
SendWISPRGPS	boy/wispr.c	/^bool SendWISPRGPS = false;$/;"	v
Send_Blocks	ant/GPSIRID.c	/^int Send_Blocks(char *bitmap, uchar NumOfBlks, ushort BlockLength,$/;"	f
Send_File	ant/GPSIRID.c	/^short Send_File(bool FileExist, long filelength) {$/;"	f
Settings	boy/settings.h	/^} Settings;$/;"	t	typeref:struct:__anon6
SetupHardware	boy/mpc.c	/^void SetupHardware(void) {$/;"	f
Setup_ADS	boy/ads.c	/^ushort Setup_ADS(bool ads_on, long filecounter, ushort val) {$/;"	f
Setup_Acquisition	boy/ads.c	/^void Setup_Acquisition(ushort BitShift) {$/;"	f
SignalQuality	ant/GPSIRID.c	/^short SignalQuality(short *signal_quality) {$/;"	f
Sleep	boy/lara.c	/^void Sleep(void) {$/;"	f
SleepUntilWoken	boy/lara.c	/^void SleepUntilWoken(void) {$/;"	f
StatusCheck	ant/GPSIRID.c	/^void StatusCheck() {$/;"	f
StringSearch	ant/GPSIRID.c	/^short StringSearch(char *inString, char *Template, uchar *compstring) {$/;"	f
Surfaced	boy/winch.c	/^bool Surfaced;$/;"	v
SystemParameters	boy/global.h	/^} SystemParameters;$/;"	t	typeref:struct:__anon3
SystemStatus	boy/global.h	/^} SystemStatus;$/;"	t	typeref:struct:__anon4
System_Timer	boy/mpc.c	/^int System_Timer() {$/;"	f
TDEPTH	boy/winch.h	/^  short TDEPTH; \/\/ CTD depth at optimal position for iridium\/gps comms (Antenna$/;"	m	struct:__anon7
TOPDEPTH	boy/global.h	/^  float TOPDEPTH;$/;"	m	struct:__anon4
TX_Success	ant/GPSIRID.c	/^short TX_Success = 0;$/;"	v
Time	boy/mpc.c	/^char *Time(ulong *seconds) {$/;"	f
TimeDate	boy/mpc.c	/^char *TimeDate(ulong *seconds) {$/;"	f
TimeExpired	ant/GPSIRID.c	/^bool TimeExpired = false;$/;"	v
TimingDelayCount	ant/GPSIRID.c	/^ulong TimingDelayCount;$/;"	v
TotalDetections	boy/wispr.c	/^int TotalDetections;$/;"	v
TotalPower	boy/ads.c	/^long TotalPower[2] = {0, 0};$/;"	v
UpdateWISPRFRS	boy/wispr.c	/^void UpdateWISPRFRS() {$/;"	f
UploadFiles	ant/GPSIRID.c	/^short UploadFiles() {$/;"	f
VEEStoreShort	boy/mpc.c	/^void VEEStoreShort(char *veename, short value) {$/;"	f
VERSION	ant/antmain.c	54;"	d	file:
VOLTAGE	boy/ads.c	/^long VOLTAGE; \/\/ Summation of channel 1 from QSPI sampling function$/;"	v
Voltage	boy/ads.c	/^float Voltage = 0.0;$/;"	v
Voltage_Now	boy/ads.c	/^float Voltage_Now() {$/;"	f
WARMUP	ant/GPSIRID.h	/^  short WARMUP; \/\/ IRID GPS Unit warm up in sec\/\/Does this really need to be in$/;"	m	struct:__anon1
WARMUP_DEFAULT	boy/settings.h	102;"	d
WARMUP_DESC	boy/settings.h	103;"	d
WARMUP_NAME	boy/settings.h	101;"	d
WINCH	boy/winch.c	/^WinchCalls WINCH;$/;"	v
WINCHCALLS	boy/winch.h	/^  short WINCHCALLS;$/;"	m	struct:__anon8
WINCHParameters	boy/winch.h	/^} WINCHParameters;$/;"	t	typeref:struct:__anon7
WISP	boy/wispr.c	/^WISPRParameters WISP;$/;"	v
WISPR	boy/define.h	19;"	d
WISPRDFP	boy/wispr.c	/^void WISPRDFP() {$/;"	f
WISPRDet	boy/wispr.c	/^void WISPRDet(int dtx) {$/;"	f
WISPRExit	boy/wispr.c	/^bool WISPRExit() {$/;"	f
WISPRExpectedReturn	boy/wispr.c	/^bool WISPRExpectedReturn(short expected, bool reboot) {$/;"	f
WISPRFOUR	boy/mpc_global.h	5;"	d
WISPRFreeSpace	boy/wispr.c	/^float WISPRFreeSpace = 0.0;$/;"	v
WISPRGAIN_DEFAULT	boy/settings.h	152;"	d
WISPRGAIN_DESC	boy/settings.h	153;"	d
WISPRGAIN_NAME	boy/settings.h	151;"	d
WISPRGPS	boy/wispr.c	/^void WISPRGPS() {$/;"	f
WISPRGPSSends	boy/wispr.c	/^static int WISPRGPSSends;$/;"	v	file:
WISPRGain	boy/wispr.c	/^void WISPRGain(short c) {$/;"	f
WISPRMODE_DEFAULT	boy/settings.h	168;"	d
WISPRMODE_DESC	boy/settings.h	169;"	d
WISPRMODE_NAME	boy/settings.h	167;"	d
WISPRNUMBER	boy/define.h	36;"	d
WISPRNUMBER	boy/define.h	38;"	d
WISPRNUM_DEFAULT	boy/settings.h	157;"	d
WISPRNUM_DESC	boy/settings.h	158;"	d
WISPRNUM_NAME	boy/settings.h	156;"	d
WISPRONE	boy/mpc_global.h	7;"	d
WISPRParameters	boy/wispr.h	/^} WISPRParameters;$/;"	t	typeref:struct:__anon9
WISPRPower	boy/wispr.c	/^void WISPRPower(bool power) {$/;"	f
WISPRSafeShutdown	boy/wispr.c	/^void WISPRSafeShutdown() {$/;"	f
WISPRTFP	boy/wispr.c	/^void WISPRTFP() {$/;"	f
WISPRTHREE	boy/mpc_global.h	4;"	d
WISPRTWO	boy/mpc_global.h	8;"	d
WISPRWriteFile	boy/wispr.c	/^void WISPRWriteFile(int uploadfilehandle) {$/;"	f
WISPR_Data	boy/wispr.c	/^short WISPR_Data() {$/;"	f
WISPR_On	boy/wispr.c	/^bool WISPR_On;$/;"	v
WISPR_PWR_OFF	boy/mpc_global.h	14;"	d
WISPR_PWR_ON	boy/mpc_global.h	13;"	d
WISPR_Status	boy/wispr.c	/^bool WISPR_Status() { return WISPR_On; }$/;"	f
WTMODE	ant/antmain.c	80;"	d	file:
WTMODE	boy/mpc_global.h	18;"	d
WaitForWinch	boy/lara.c	/^void WaitForWinch(short expectedBuoyMode) {$/;"	f
WinchCalls	boy/winch.h	/^} WinchCalls;$/;"	t	typeref:struct:__anon8
WinchConsole	boy/winch.c	/^void WinchConsole() {$/;"	f
Winch_Ascend	boy/winch.c	/^ulong Winch_Ascend(void) {$/;"	f
Winch_Descend	boy/winch.c	/^ulong Winch_Descend(void) {$/;"	f
Winch_Monitor	boy/winch.c	/^void Winch_Monitor(int filehandle) {$/;"	f
Winch_Stop	boy/winch.c	/^ulong Winch_Stop(void) {$/;"	f
WisprString	boy/wispr.c	/^static char WisprString[64];$/;"	v	file:
WriteBuffer	boy/global.c	/^char WriteBuffer[BUFSZ];$/;"	v
WriteBuffer	boy/lara.c	/^char WriteBuffer[BUFSZ];$/;"	v
WriteFile	boy/lara.c	/^ulong WriteFile(ulong TotalSeconds) {$/;"	f
ad	boy/ads.c	/^CFxAD *ad, adbuf;$/;"	v
adbuf	boy/ads.c	/^CFxAD *ad, adbuf;$/;"	v
antSw	ant/antmain.c	/^char antSw;$/;"	v
antennaSwitch	ant/antmain.c	/^void antennaSwitch(char c) {$/;"	f
buf	ant/antmain.c	/^uchar *buf;$/;"	v
buoy	ant/antmain.c	/^TUPort *buoy=NULL, *devPort=NULL; \/\/ dev port of connnected upstream device$/;"	v
c	ant/antmain.c	/^struct { char *name, c; bool power; TUPort *port; } dev[3] = {$/;"	m	struct:__anon2	file:
char2id	ant/antmain.c	/^short char2id(short ch) {$/;"	f
connect	ant/antmain.c	/^void connect(char c) {$/;"	f
create_dtx_file	boy/wispr.c	/^void create_dtx_file(long fnum) {$/;"	f
ctd	boy/ctd.c	/^} ctd;$/;"	v	typeref:struct:CTDParameters
data	boy/ads.c	/^bool data;$/;"	v
delay	boy/ctd.c	/^  short delay;          \/\/Delay in seconds between polled samples$/;"	m	struct:CTDParameters	file:
dev	ant/antmain.c	/^struct { char *name, c; bool power; TUPort *port; } dev[3] = {$/;"	v	typeref:struct:__anon2
devID	ant/antmain.c	/^short devID; \/\/ ID of upstream device, 1-2$/;"	v
devPort	ant/antmain.c	/^TUPort *buoy=NULL, *devPort=NULL; \/\/ dev port of connnected upstream device$/;"	v
dtxrqst	boy/wispr.c	/^int dtxrqst;$/;"	v
getByte	ant/antmain.c	/^short getByte(TUPort *tup) {$/;"	f
help	ant/antmain.c	/^void help() {$/;"	f
init	ant/antmain.c	/^void init() {$/;"	f
main	ant/antmain.c	/^void main() {$/;"	f
main	boy/lara.c	/^void main() {$/;"	f
maxcurrent	boy/ads.c	/^ushort maxcurrent = 0;$/;"	v
minvoltage	boy/ads.c	/^ushort minvoltage = 0;$/;"	v
mirrorpins	boy/lara.c	/^uchar mirrorpins[] = {15, 16, 17, 18, 19, 26, 36, 0};$/;"	v
name	ant/antmain.c	/^struct { char *name, c; bool power; TUPort *port; } dev[3] = {$/;"	m	struct:__anon2	file:
optCurrent	boy/settings.h	/^  char *optCurrent; \/\/ current value$/;"	m	struct:__anon6
optDefault	boy/settings.h	/^  char *optDefault; \/\/ default value$/;"	m	struct:__anon6
optDesc	boy/settings.h	/^  char *optDesc;    \/\/ detailed description text$/;"	m	struct:__anon6
optName	boy/settings.h	/^  char *optName;    \/\/ VEE name for lookup$/;"	m	struct:__anon6
port	ant/antmain.c	/^struct { char *name, c; bool power; TUPort *port; } dev[3] = {$/;"	m	struct:__anon2	file:
port	boy/ctd.c	/^  TUPort port;$/;"	m	struct:CTDParameters	file:
power	ant/antmain.c	/^short power(short c, bool onoff) {$/;"	f
power	ant/antmain.c	/^struct { char *name, c; bool power; TUPort *port; } dev[3] = {$/;"	m	struct:__anon2	file:
prerun	ant/antmain.c	/^void prerun() {$/;"	f
print_clock_cycle_count	boy/mpc.c	/^void print_clock_cycle_count(clock_t start, clock_t stop, char *label) {$/;"	f
printchar	ant/antmain.c	/^void printchar(char c) {$/;"	f
printsafe	boy/mpc.c	/^void printsafe (long l, uchar *b) {$/;"	f
returnstr	boy/lara.c	/^static char returnstr[BUFSZ];$/;"	v	file:
scratch	boy/global.c	/^char scratch[BUFSZ], stringin[BUFSZ], stringout[BUFSZ];$/;"	v
shutdown	boy/lara.c	/^void shutdown() {$/;"	f
start_clock	boy/mpc.c	/^volatile clock_t start_clock;$/;"	v
status	ant/antmain.c	/^void status() {$/;"	f
stop_clock	boy/mpc.c	/^volatile clock_t stop_clock;$/;"	v
stringin	boy/global.c	/^char scratch[BUFSZ], stringin[BUFSZ], stringout[BUFSZ];$/;"	v
stringout	boy/global.c	/^char scratch[BUFSZ], stringin[BUFSZ], stringout[BUFSZ];$/;"	v
syncMode	boy/ctd.c	/^  bool syncMode;$/;"	m	struct:CTDParameters	file:
time_chr	boy/mpc.c	/^char time_chr[21];$/;"	v
transBlock	ant/antmain.c	/^void transBlock(long b) {$/;"	f
uploadfile	boy/lara.c	/^static char uploadfile[] =$/;"	v	file:
wisprfile	boy/wispr.c	/^static char wisprfile[] = "c:WISPRFRS.DAT";$/;"	v	file:
