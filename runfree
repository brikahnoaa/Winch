
///
// ascend. check angle due to current, up midway, re-check angle, surface.
// sets: boy.alarm[]
PhaseType risePhase(void) {
  int result;
  flogf("risePhase()");
  if (boy.noRise) return irid_pha;
  antStart();
  ctdStart();
  ngkStart();
  // if current is too strong at bottom
  if (oceanCurrChk()) {
    sysAlarm(bottomCurr_alm);
    //?? return fall_pha;
  }
  // testing
  if (boy.cycle % 2) {
    // R,01,03
    result = riseRun(boy.currChkD, 0);
    ngkSend(stopCmd_msg);
    if (result) {
      flogf("\n\t| rise fails at %3.1f m", antDepth());
      //??  return fall_pha;
    }
    // if current is too strong at midway
    if (oceanCurrChk()) {
      sysAlarm(midwayCurr_alm);
      //?? return fall_pha;
    }
    // surface, 1 meter below float level
    result = riseRun(antSurfD()+1, 0);
    if (result) {
      flogf(" | fails at %3.1f m", antDepth());
      //?? return fall_pha;
    }
  } else {
    // R,01,00
    riseFree(antSurfD()+1, 0);
  }
  return irid_pha;
} // risePhase


///
// rise and keep sending cable, run on current
int riseRun(float targetD, int try) {
  bool twentyB=false, stopB=false, errB=false;
  float nowD, startD, lastD, velo;
  int est;        // estimated operation time
  MsgType msg;
  enum {targetT, ngkT, twentyT, fiveT};  // local timer names
  flogf("\nriseRun(%3.1f, %d)", targetD, try);
  utlNap(15);
  antSample();
  antDataWait();
  nowD = startD = antDepth();
  if (startD < targetD) return 1;
  if (try > boy.riseRetry) return 2;
  // .riseOrig=as tested, .riseRate=seen, .rateAccu=fudgeFactor
  // est needs more testing ??
  // ?? est = (int) (((nowD-targetD) / boy.riseVTest) * boy.rateAccu);
  // est hack = depth * sec/meter + fudge
  est = 20*3+30;
  tmrStart(targetT, est);
  tmrStart(twentyT, 20);
  tmrStart(fiveT, 5);
  ngkFlush();
  ngkSend(riseCmd_msg);
  tmrStart(ngkT, boy.ngkDelay*2);
  ctdPrompt();
  ctdSample();
  antSample();
  flogf("\n\triseRun() riseCmd to winch at %s", utlTime());
  while (!stopB && !errB) {       // redundant, loop exits by break;
    utlX();
    if (ctdData())
      ctdRead();
    // check: target, winch, 20s, 5s
    if (antData())
      nowD = antDepth();
    // arrived?
    if (nowD<targetD) {
      flogf("\n\triseRun() reached targetD %3.1f at %s", nowD, utlTime());
      tmrStop(targetT);
      stopB = true;
      break;
    }
    // op timeout - longer than estimated time + fudge
    if (tmrExp(targetT)) {
      flogf("\nriseRun() ERR \t| rise timeout %ds @ %3.1f, stop", est, nowD);
      errB = true;
      break;
    }
    // winch
    if (ngkRecv(&msg)!=null_msg) {
      flogf(", %s from winch", ngkMsgName(msg));
      if (msg==stopCmd_msg) {
        // riseRun - keep going
        ngkSend(riseCmd_msg);
        tmrStop(targetT);
        stopB = true;
        break;
      }
      if (msg==riseRsp_msg)
        tmrStop(ngkT);
    }
    if (tmrExp(ngkT)) {
      flogf("\n\triseRun() no response from winch %s", utlTime());
      // ?? missed it? 20s timeout will tell
      // ngkSend(riseCmd_msg);
    }
    // 20 seconds
    if (tmrExp(twentyT)) {
      flogf("\n\triseRun() 20sec %s startD-nowD %3.1f ", 
        utlTime(), startD-nowD);
      if (startD-nowD < 2) {
        // by now we should have moved up 4 meters in 13.5s
        flogf("ERR < 2m");
        errB = true;
        break;
      } else {
        twentyB = true;
        lastD = nowD;
      }
    }
    // 5 seconds
    if (tmrExp(fiveT)) {
      tmrStart(fiveT, 5);
      flogf("\n\triseRun() %s depth=%3.1f", utlTime(), nowD);
      if (!antVelo(&velo)) 
        flogf(" velo=%4.2f", velo);
    } 
  } // while !stop
  // retry if error
  if (errB) {
    flogf(", retry %d", ++try);
    return riseRun(targetD, try);
  } else { 
    // normal stop
    return 0;
  }
} // riseRun

///
// rise and stop with no brake
int riseFree(float targetD, int try) {
  bool twentyB=false, stopB=false, errB=false;
  float nowD, startD, lastD, velo;
  int est;        // estimated operation time
  MsgType msg;
  enum {targetT, ngkT, twentyT, fiveT};  // local timer names
  flogf("riseRun(%3.1f, %d)", targetD, try);
  utlNap(15);
  antSample();
  antDataWait();
  nowD = startD = antDepth();
  if (startD < targetD) return 1;
  if (try > boy.riseRetry) return 2;
  // .riseOrig=as tested, .riseRate=seen, .rateAccu=fudgeFactor
  // est needs more testing ??
  // ?? est = (int) (((nowD-targetD) / boy.riseVTest) * boy.rateAccu);
  // est hack = depth * sec/meter + fudge
  est = 20*3+30;
  tmrStart(targetT, est);
  tmrStart(twentyT, 20);
  tmrStart(fiveT, 5);
  ngkFlush();
  ngkSend(surfCmd_msg);
  tmrStart(ngkT, boy.ngkDelay*2);
  ctdPrompt();
  ctdSample();
  antSample();
  flogf("\n\triseFree() surfCmd to winch at %s", utlTime());
  while (!stopB && !errB) {       // redundant, loop exits by break;
    utlX();
    if (ctdData())
      ctdRead();
    // check: target, winch, 20s, 5s
    if (antData())
      nowD = antDepth();
    // arrived?
    if (nowD<targetD) {
      flogf("\n\triseFree() reached targetD %3.1f at %s", nowD, utlTime());
      tmrStop(targetT);
      stopB = true;
      break;
    }
    // op timeout - longer than estimated time + fudge
    if (tmrExp(targetT)) {
      flogf("\nriseFree() ERR \t| rise timeout %ds @ %3.1f, stop", est, nowD);
      errB = true;
      break;
    }
    // winch
    if (ngkRecv(&msg)!=null_msg) {
      flogf(", %s from winch", ngkMsgName(msg));
      if (msg==stopCmd_msg) {
        tmrStop(targetT);
        stopB = true;
        break;
      }
      if (msg==riseRsp_msg)
        tmrStop(ngkT);
    }
    if (tmrExp(ngkT)) {
      flogf("\n\triseFree() no response from winch %s", utlTime());
      // ?? missed it? 20s timeout will tell
      // ngkSend(surfCmd_msg);
    }
    // 20 seconds
    if (tmrExp(twentyT)) {
      flogf("\n\triseFree() 20sec %s startD-nowD %3.1f ", 
        utlTime(), startD-nowD);
      if (startD-nowD < 2) {
        // by now we should have moved up 4 meters
        flogf("ERR < 2");
        errB = true;
        break;
      } else {
        twentyB = true;
        lastD = nowD;
      }
    }
    // 5 seconds
    if (tmrExp(fiveT)) {
      tmrStart(fiveT, 5);
      flogf("\n\triseFree() %s depth=%3.1f", utlTime(), nowD);
      if (!antVelo(&velo)) 
        flogf(" velo=%4.2f", velo);
    } 
  } // while !stop
  // retry if error
  if (errB) {
    flogf(", retry %d", ++try);
    return riseFree(targetD, try);
  } else { 
    // normal stop
    return 0;
  }
} // riseFree


///
// rise to targetD // possible stopCmd at surface
// ?? compute riseRate
// uses: .riseRate .riseOrig .rateAccu .riseRetry
// sets: .riseRate
// rets: 0=success -1=stopCmd 1=<target 2=try
int rise(float targetD, int try) {
  bool twentyB=false, stopB=false, errB=false;
  float nowD, startD, lastD, velo;
  int i, est;        // estimated operation time
  MsgType msg;
  enum {targetT, ngkT, twentyT, fiveT};  // local timer names
  DBG0("rise(%3.1f)", targetD)
  utlNap(15);
  antSample();
  antDataWait();
  nowD = startD = antDepth();
  if (startD < targetD) return 1;
  if (try > boy.riseRetry) return 2;
  // .riseOrig=as tested, .riseRate=seen, .rateAccu=fudgeFactor
  est = (int) (((nowD-targetD) / boy.riseVTest) * boy.rateAccu);
  tmrStart(targetT, est);
  tmrStart(ngkT, boy.ngkDelay*2);
  tmrStart(twentyT, 20);
  tmrStart(fiveT, 5);
  ngkFlush();
  ngkSend(riseCmd_msg);
  ctdPrompt();
  ctdSample();
  antSample();
  flogf("\n\trise() riseCmd to winch at %s", utlTime());
  while (!stopB && !errB) {       // redundant, loop exits by break;
    utlX();
    if (ctdData()) 
      ctdRead();
    // check: target, winch, 20s, 5s
    if (antData())
      nowD = antDepth();
    // arrived?
    if (nowD<targetD) {
      flogf("\n\trise() reached targetD %3.1f at %s", nowD, utlTime());
      tmrStop(targetT);
      stopB = true;
      break;
    }
    // op timeout - longer than estimated time * 1.5 (rateAccu)
    if (tmrExp(targetT)) {
      flogf("\nrise() ERR \t| rise timeout %ds @ %3.1f, stop", est, nowD);
      errB = true;
      break;
    }
    // winch
    if (ngkRecv(&msg)!=null_msg) {
      flogf(", %s from winch", ngkMsgName(msg));
      if (msg==stopCmd_msg)
        return -1;
      if (msg==riseRsp_msg)
        tmrStop(ngkT);
    }
    if (tmrExp(ngkT)) {
      flogf("\n\trise() no response from winch %s", utlTime());
    }
    // 20 seconds
    if (tmrExp(twentyT)) {
      flogf("\n\trise() %s 20sec startD-nowD %3.1f ", 
        utlTime(), startD-nowD);
      if (startD-nowD < 2) {
        // by now we should have moved up 4 meters
        flogf("ERR < 2");
        errB = true;
        break;
      } else {
        twentyB = true;
        lastD = nowD;
      }
    }
    // 5 seconds
    if (tmrExp(fiveT)) {
      tmrStart(fiveT, 5);
      flogf("\n\trise() %s depth=%3.1f", utlTime(), nowD);
      if (!antVelo(&velo)) 
        flogf(" velo=%4.2f", velo);
      if (twentyB) {
        if (lastD<=nowD) {
          flogf("\nrise() ERR \t| not rising, %3.1f<=%3.1f", lastD, nowD);
          lastD = nowD;
        }
      }
    } 
  } // while !stop
  // stop - either normal or due to err
  for (i=0; i<boy.riseRetry; i++) {
    ngkSend(stopCmd_msg);
    msg = ngkRecvWait(&msg, boy.ngkDelay*2);
    if (msg==stopRsp_msg || msg==stopCmd_msg) break;
  }
  // ?? if (msg!=stopRsp_msg) damnation
  flogf("\n\trise() stopCmd-->%s", ngkMsgName(msg));
  // retry if error
  if (errB) {
    flogf(", retry %d", ++try);
    return rise(targetD, try);
  } else { 
    // normal stop
    return 0;
  }
} // rise

